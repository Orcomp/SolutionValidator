//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SolutionValidator.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SolutionValidator.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Properties in project {0} &apos;{1}&apos; and &apos;{2}&apos; are identical (&apos;{3}&apos;). {4}.
        /// </summary>
        internal static string CheckIdenticalProjectFileRule_DoValidation_Properties_in_project_are_identical {
            get {
                return ResourceManager.GetString("CheckIdenticalProjectFileRule_DoValidation_Properties_in_project_are_identical", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Properties in project {0} &apos;{1}&apos; and &apos;{2}&apos; are not identical (&apos;{3}&apos; &lt;&gt; &apos;{4}&apos;). {5}.
        /// </summary>
        internal static string CheckIdenticalProjectFileRule_DoValidation_Properties_in_project_are_not_identical {
            get {
                return ResourceManager.GetString("CheckIdenticalProjectFileRule_DoValidation_Properties_in_project_are_not_identica" +
                        "l", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Project &apos;{0}&apos; contains expected configuration &apos;{1}&apos;. {2}.
        /// </summary>
        internal static string ConfigurationExistsProjectFileRule_Validate_Project_contains_expected_configuration {
            get {
                return ResourceManager.GetString("ConfigurationExistsProjectFileRule_Validate_Project contains_expected_configurati" +
                        "on", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to does not exist.
        /// </summary>
        internal static string FileRule_Validate_does_not_exist_ {
            get {
                return ResourceManager.GetString("FileRule_Validate_does_not_exist_", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to does not exist. This file must exist.
        /// </summary>
        internal static string FileRule_Validate_does_not_exist__This_file_must_exist_ {
            get {
                return ResourceManager.GetString("FileRule_Validate_does_not_exist__This_file_must_exist_", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to exists.
        /// </summary>
        internal static string FileRule_Validate_exists_ {
            get {
                return ResourceManager.GetString("FileRule_Validate_exists_", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to exists. This file should not exist.
        /// </summary>
        internal static string FileRule_Validate_exists__This_file_should_not_exist_ {
            get {
                return ResourceManager.GetString("FileRule_Validate_exists__This_file_should_not_exist_", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to does not exist.
        /// </summary>
        internal static string FolderRule_Validate_does_not_exist {
            get {
                return ResourceManager.GetString("FolderRule_Validate_does_not_exist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to does not exist. This folder must exist.
        /// </summary>
        internal static string FolderRule_Validate_does_not_exist_This_folder_must_exist {
            get {
                return ResourceManager.GetString("FolderRule_Validate_does_not_exist_This_folder_must_exist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to exists.
        /// </summary>
        internal static string FolderRule_Validate_exists {
            get {
                return ResourceManager.GetString("FolderRule_Validate_exists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to exists. This folder should not exist.
        /// </summary>
        internal static string FolderRule_Validate_exists_This_folder_should_not_exist {
            get {
                return ResourceManager.GetString("FolderRule_Validate_exists_This_folder_should_not_exist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error getting EvaluatedDefinitionFilePath.
        /// </summary>
        internal static string FolderStructureElement_EvaluatedDefinitionFilePath_Error_getting_EvaluatedDefinitionFilePath {
            get {
                return ResourceManager.GetString("FolderStructureElement_EvaluatedDefinitionFilePath_Error_getting_EvaluatedDefinit" +
                        "ionFilePath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can not get output path. {0}.
        /// </summary>
        internal static string ProjectFileHelper_CheckOne_Can_not_get_output_path {
            get {
                return ResourceManager.GetString("ProjectFileHelper_CheckOne_Can_not_get_output_path", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Output path must be a relative path. Output path was: &apos;{0}&apos;. {1}.
        /// </summary>
        internal static string ProjectFileHelper_CheckOne_Output_path_must_be_a_relative_path {
            get {
                return ResourceManager.GetString("ProjectFileHelper_CheckOne_Output_path_must_be_a_relative_path", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Output path was evaluated to: &apos;{0}&apos;. Expected value: &apos;{1}&apos; (in relative path form, beginning with &apos;.&apos;. {2}.
        /// </summary>
        internal static string ProjectFileHelper_CheckOne_Output_path_was_evaluated_to {
            get {
                return ResourceManager.GetString("ProjectFileHelper_CheckOne_Output_path_was_evaluated_to", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OutputPath conforms to the required standards. {0}.
        /// </summary>
        internal static string ProjectFileHelper_CheckOneOutputPath_OutputPath_conforms_to_the_required_standards {
            get {
                return ResourceManager.GetString("ProjectFileHelper_CheckOneOutputPath_OutputPath_conforms_to_the_required_standard" +
                        "s", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to GetAllProjectPath was called with bad argument. root: {0}.
        /// </summary>
        internal static string ProjectFileHelper_GetAllProjectFilePath_GetAllProjectPath_was_called_with_bad_argument {
            get {
                return ResourceManager.GetString("ProjectFileHelper_GetAllProjectFilePath_GetAllProjectPath_was_called_with_bad_arg" +
                        "ument", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Checking repository: &apos;{0}&apos;.
        /// </summary>
        internal static string RuleProcessor_Process_Checking_repository {
            get {
                return ResourceManager.GetString("RuleProcessor_Process_Checking_repository", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unexpected error while processing rule: {0}.
        /// </summary>
        internal static string RuleProcessor_Process_Unexpected_error_while_processing_rule {
            get {
                return ResourceManager.GetString("RuleProcessor_Process_Unexpected_error_while_processing_rule", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Folder structure check was set to &apos;true&apos; but folder structure definition file was not found: {0}.
        /// </summary>
        internal static string RuleProcessor_RuleProcessor_Folder_structure_definition_file_not_found {
            get {
                return ResourceManager.GetString("RuleProcessor_RuleProcessor_Folder_structure_definition_file_not_found", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Repository root folder does not exists: &apos;{0}&apos;.
        /// </summary>
        internal static string RuleProcessor_RuleProcessor_Repository_root_folder_does_not_exists {
            get {
                return ResourceManager.GetString("RuleProcessor_RuleProcessor_Repository_root_folder_does_not_exists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unknown rule.
        /// </summary>
        internal static string ValidationResult_ValidationResult_Unknown_rule {
            get {
                return ResourceManager.GetString("ValidationResult_ValidationResult_Unknown_rule", resourceCulture);
            }
        }
    }
}
